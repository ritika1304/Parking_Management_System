{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState } from \"react\";\nfunction BookingService() {\n  _s();\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const bookSpot = async (userId, lotId, spotNumber, duration) => {\n    setLoading(true);\n    setError(null);\n    try {\n      const response = await fetch(\"/api/bookings\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          userId,\n          lotId,\n          spotNumber,\n          duration\n        })\n      });\n      if (!response.ok) {\n        throw new Error(\"Booking failed.\");\n      }\n      setLoading(false);\n      return true;\n    } catch (error) {\n      setLoading(false);\n      setError(error.message);\n      return false;\n    }\n  };\n  return {\n    bookSpot,\n    loading,\n    error\n  };\n}\n_s(BookingService, \"Iz3ozxQ+abMaAIcGIvU8cKUcBeo=\");\n_c = BookingService;\nexport default BookingService;\nvar _c;\n$RefreshReg$(_c, \"BookingService\");","map":{"version":3,"names":["useState","BookingService","_s","loading","setLoading","error","setError","bookSpot","userId","lotId","spotNumber","duration","response","fetch","method","headers","body","JSON","stringify","ok","Error","message","_c","$RefreshReg$"],"sources":["C:/Users/New/Desktop/parkL/parkl/src/User/BookServices.js"],"sourcesContent":["import { useState } from \"react\";\r\n\r\nfunction BookingService() {\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  const bookSpot = async (userId, lotId, spotNumber, duration) => {\r\n    setLoading(true);\r\n    setError(null);\r\n\r\n    try {\r\n      const response = await fetch(\"/api/bookings\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({\r\n          userId,\r\n          lotId,\r\n          spotNumber,\r\n          duration,\r\n        }),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(\"Booking failed.\");\r\n      }\r\n\r\n      setLoading(false);\r\n      return true;\r\n    } catch (error) {\r\n      setLoading(false);\r\n      setError(error.message);\r\n      return false;\r\n    }\r\n  };\r\n\r\n  return { bookSpot, loading, error };\r\n}\r\n\r\nexport default BookingService;\r\n"],"mappings":";AAAA,SAASA,QAAQ,QAAQ,OAAO;AAEhC,SAASC,cAAcA,CAAA,EAAG;EAAAC,EAAA;EACxB,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGJ,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACK,KAAK,EAAEC,QAAQ,CAAC,GAAGN,QAAQ,CAAC,IAAI,CAAC;EAExC,MAAMO,QAAQ,GAAG,MAAAA,CAAOC,MAAM,EAAEC,KAAK,EAAEC,UAAU,EAAEC,QAAQ,KAAK;IAC9DP,UAAU,CAAC,IAAI,CAAC;IAChBE,QAAQ,CAAC,IAAI,CAAC;IAEd,IAAI;MACF,MAAMM,QAAQ,GAAG,MAAMC,KAAK,CAAC,eAAe,EAAE;QAC5CC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UACnBV,MAAM;UACNC,KAAK;UACLC,UAAU;UACVC;QACF,CAAC;MACH,CAAC,CAAC;MAEF,IAAI,CAACC,QAAQ,CAACO,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,iBAAiB,CAAC;MACpC;MAEAhB,UAAU,CAAC,KAAK,CAAC;MACjB,OAAO,IAAI;IACb,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdD,UAAU,CAAC,KAAK,CAAC;MACjBE,QAAQ,CAACD,KAAK,CAACgB,OAAO,CAAC;MACvB,OAAO,KAAK;IACd;EACF,CAAC;EAED,OAAO;IAAEd,QAAQ;IAAEJ,OAAO;IAAEE;EAAM,CAAC;AACrC;AAACH,EAAA,CApCQD,cAAc;AAAAqB,EAAA,GAAdrB,cAAc;AAsCvB,eAAeA,cAAc;AAAC,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}