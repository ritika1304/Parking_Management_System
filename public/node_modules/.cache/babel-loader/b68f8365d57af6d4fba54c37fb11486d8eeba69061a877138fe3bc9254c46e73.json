{"ast":null,"code":"// import { useState, useEffect } from \"react\";\n\n// function StatusService(lotId) {\n//   const [status, setStatus] = useState(null);\n//   const [loading, setLoading] = useState(false);\n//   const [error, setError] = useState(null);\n\n//   useEffect(() => {\n//     const fetchStatus = async () => {\n//       setLoading(true);\n//       setError(null);\n\n//       try {\n//         const response = await fetch(`/api/lots/${lotId}/status`);\n\n//         if (!response.ok) {\n//           throw new Error(\"Failed to fetch status.\");\n//         }\n\n//         const data = await response.json();\n//         setStatus(data.status);\n//         setLoading(false);\n//       } catch (error) {\n//         setLoading(false);\n//         setError(error.message);\n//       }\n//     };\n\n//     fetchStatus();\n//   }, [lotId]);\n\n//   return { status, loading, error };\n// }\n\n// export default StatusService;","map":{"version":3,"names":[],"sources":["C:/Users/New/Desktop/parkL/parkl/src/User/StatusServices.js"],"sourcesContent":["// import { useState, useEffect } from \"react\";\r\n\r\n// function StatusService(lotId) {\r\n//   const [status, setStatus] = useState(null);\r\n//   const [loading, setLoading] = useState(false);\r\n//   const [error, setError] = useState(null);\r\n\r\n//   useEffect(() => {\r\n//     const fetchStatus = async () => {\r\n//       setLoading(true);\r\n//       setError(null);\r\n\r\n//       try {\r\n//         const response = await fetch(`/api/lots/${lotId}/status`);\r\n\r\n//         if (!response.ok) {\r\n//           throw new Error(\"Failed to fetch status.\");\r\n//         }\r\n\r\n//         const data = await response.json();\r\n//         setStatus(data.status);\r\n//         setLoading(false);\r\n//       } catch (error) {\r\n//         setLoading(false);\r\n//         setError(error.message);\r\n//       }\r\n//     };\r\n\r\n//     fetchStatus();\r\n//   }, [lotId]);\r\n\r\n//   return { status, loading, error };\r\n// }\r\n\r\n// export default StatusService;\r\n"],"mappings":"AAAA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}